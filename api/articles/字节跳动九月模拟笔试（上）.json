{"title":"字节跳动2022年9月模拟笔试（上）","uid":"8ff685f8218119a3e3b228fe1d1d8ae5","slug":"字节跳动九月模拟笔试（上）","date":"2022-09-07T13:57:00.000Z","updated":"2022-10-05T06:34:28.102Z","comments":true,"path":"api/articles/字节跳动九月模拟笔试（上）.json","keywords":null,"cover":"https://res.cloudinary.com/dg7crzfct/image/upload/v1664951146/%E6%96%87%E7%AB%A0%E7%B4%A0%E6%9D%90%E5%BA%93/shahadat-rahman-gnyA8vd3Otc-unsplash_sufut6.jpg","content":"<h1 id=\"9月排名赛代码总结\"><a href=\"#9月排名赛代码总结\" class=\"headerlink\" title=\"9月排名赛代码总结\"></a>9月排名赛代码总结</h1><h1 id=\"第一题：炮弹传感器2\"><a href=\"#第一题：炮弹传感器2\" class=\"headerlink\" title=\"第一题：炮弹传感器2\"></a>第一题：炮弹传感器2</h1><p>为了研究炮弹的射击轨迹，研究人员在炮弹上安装了一个高精度的高度传感器，每隔一小段时间记录一下当前的海拔高度。研究人员需要找到一个快速的算法，可以方便的找到曾经飞到过某一个高度的炮弹数据。</p>\n<h2 id=\"输入描述\"><a href=\"#输入描述\" class=\"headerlink\" title=\"输入描述:\"></a>输入描述:</h2><p>第一行为正整数m，表示有m组测试用例，其中1&lt;&#x3D;m &lt;&#x3D;10000接下来2m行，每2行代表一组测试用例</p>\n<p>其中，前一行为正整数n, k，分别代表数据传感器的数据条数和目标高度，其中1&lt;&#x3D;n &lt;&#x3D; 10000，1 &lt;&#x3D;k &lt;&#x3D;10000o</p>\n<p>后一行有n个正整数，编号为[0,… , n-1]，代表数据传感器的高度数据，先升后降，而且只有可能在最高点存在相邻数据高度一样的情况，其余地方不存在相邻数据高度一致的情况，其中每个数据均满足[0,100000]</p>\n<h2 id=\"输出描述\"><a href=\"#输出描述\" class=\"headerlink\" title=\"输出描述:\"></a>输出描述:</h2><p>每行输出一个炮弹是否飞到过当前高度，如果是，打标输出在采样数据的第几个到第几个数据是在该高度及以上</p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><h2 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h2><p>5</p>\n<p>9 4</p>\n<p>1 2 3 4 5 5 4 3 2</p>\n<p>9 14</p>\n<p>1 2 3 4 5 5 4 3 2</p>\n<p>11 7</p>\n<p>1 2 3 4 5 6 7 5 4 3 2</p>\n<p>1 14</p>\n<p>1</p>\n<p>1 1</p>\n<p>1</p>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>true 3 6</p>\n<p>false</p>\n<p>true 6 6</p>\n<p>False</p>\n<p>true 0 0</p>\n<ul>\n<li><h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2></li>\n<li><ul>\n<li><p>思路：双指针，两端分别在<code>0</code>和<code>n-1</code>分别开始，直到高度到达k。</p>\n</li>\n<li><p>正常情况是<code>i</code>和<code>j</code>分别在两边，即<code>i &lt;= j</code>，输出<code>true i j</code>；</p>\n</li>\n<li><p>若<code>i &gt; j</code>，则没有到达指定高度，输出<code>false</code>。</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">const readline &#x3D; require(&#39;readline&#39;);\nconst rl &#x3D; readline.createInterface(&#123;\n        input: process.stdin,\n        output: process.stdout,\n&#125;);\nlet cur_line &#x3D; 0;\nlet k;\nrl.on(&#39;line&#39;, line &#x3D;&gt; &#123;\n        if (cur_line &#x3D;&#x3D; 0) &#123;\n                cur_line +&#x3D; 1;\n                return;\n        &#125;\n        if (cur_line % 2 !&#x3D;&#x3D; 0) &#123;\n                &#x2F;&#x2F; 奇数行得到k\n                k &#x3D; parseInt(line.split(&#39; &#39;)[1]);\n        &#125; else &#123;\n                let arr &#x3D; line.split(&#39; &#39;).map(val &#x3D;&gt; parseInt(val));\n                console.log(&#39;******答案输出：&#39;, findheight(arr, k));\n        &#125;\n        cur_line +&#x3D; 1;\n&#125;);\n\nfunction findheight(arr, k) &#123;\n        let i &#x3D; 0,\n                n &#x3D; arr.length,\n                j &#x3D; n - 1;\n        while (i &lt; n &amp;&amp; arr[i] &lt; k) i++;\n        while (i &gt; 0 &amp;&amp; arr[j] &lt; k) j--;\n        if (i &gt; j) &#123;\n                return false;\n        &#125; else &#123;\n                return &#96;true $&#123;i&#125; $&#123;j&#125;&#96;;\n        &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"第二题：取餐次序计算\"><a href=\"#第二题：取餐次序计算\" class=\"headerlink\" title=\"第二题：取餐次序计算\"></a>第二题：取餐次序计算</h1><p>防疫期间，为了降低传播风险，公司食堂启用线上订餐、通知取餐的策略，公司员工需要在线上提交就餐需求，并填写对取餐时间安排的容忍度（1-9个等级)，容忍度越低表示越想拿到饭，会被更早通知取餐，就餐需求提交后会按照提交顺序生成订单(订单号从1开始递增)，通知取餐的工作人员的工作模式如下:拿到按顺序生成的订单列表后开始翻阅，如果某订单容忍度在剩余订单中是最低的，就通知该订单的下单员工取餐，否则将订单移至列表尾部，已知某日午餐的订单列表和某个订单号，计算该订单会被安排在第几位取餐。</p>\n<h2 id=\"输入描述-1\"><a href=\"#输入描述-1\" class=\"headerlink\" title=\"输入描述:\"></a>输入描述:</h2><p>第一行两个整数，分别是订单总数m (m&lt;&#x3D;1000)、订单号n(从1开始)</p>\n<p>第二行是订单列表对应的容忍度列表</p>\n<h2 id=\"输出描述-1\"><a href=\"#输出描述-1\" class=\"headerlink\" title=\"输出描述:\"></a>输出描述:</h2><p>输出一个整数表示订单号n的实际取餐次序</p>\n<h2 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h2><p>4 3</p>\n<p>1 2 3 4</p>\n<h2 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>3</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>总共4个订单，自己的订单号是3（从1开始），按订单号排序的4个订单的容忍度分别是1、2、3、4，那么自己会被安排在第3位取餐。</p>\n<h2 id=\"示例2\"><a href=\"#示例2\" class=\"headerlink\" title=\"示例2\"></a>示例2</h2><p>7 3</p>\n<p>8 7 8 9 1 2 8</p>\n<h2 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>4</p>\n<h2 id=\"说明-1\"><a href=\"#说明-1\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>总共7个订单，自己的订单号是3(从1开始)，按订单号排序的4个订单的容忍度分别是8、7、8、9、1、2、8，那么自己会被安排在第4位取餐</p>\n<p>第一位取餐的容忍度是1</p>\n<p>第二位取餐的容忍度是2</p>\n<p>第三位取餐的容忍度是7</p>\n<p>第四位取餐的容忍度是8，即自己</p>\n<h2 id=\"解法：\"><a href=\"#解法：\" class=\"headerlink\" title=\"解法：\"></a>解法：</h2><p>思路：优先队列，但是JS没有内置的优先队列库，我不想自己写，而且我实在看不懂C++版的答案，所以下面用了sort函数直接排了个序，当作优先队列，然后维护一个指针myTurnIndex，保证可以知道自己的订单号到底在哪个位置，测了几组数据，应该是和答案一致的。</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">const readline &#x3D; require(&#39;readline&#39;);\nconst rl &#x3D; readline.createInterface(&#123;\n    input: process.stdin,\n    output: process.stdout,\n&#125;);\nlet cur_line &#x3D; 0;\nlet k;\nrl.on(&#39;line&#39;, line &#x3D;&gt; &#123;\n    if (cur_line &#x3D;&#x3D;&#x3D; 0) &#123;\n        k &#x3D; parseInt(line.split(&#39; &#39;)[1]) - 1;\n        cur_line +&#x3D; 1;\n    &#125; else if (cur_line &#x3D;&#x3D;&#x3D; 1) &#123;\n        let arr &#x3D; line.split(&#39; &#39;).map(val &#x3D;&gt; parseInt(val));\n        &#x2F;&#x2F; console.log(arr, k);\n        console.log(&#39;******答案输出：&#39;, main(arr, k));\n    &#125;\n&#125;);\n\nfunction main(arr, k) &#123;\n    let myTurnIndex &#x3D; k,\n        myTurn &#x3D; arr[k],\n        count &#x3D; 1;\n    heapq &#x3D; [];\n    arr.forEach(element &#x3D;&gt; &#123;\n        heapq.push(element);\n    &#125;);\n    heapq.sort((a, b) &#x3D;&gt; a - b);\n    console.log(heapq);\n    console.log(arr);\n    while (true) &#123;\n        let tmp &#x3D; arr.shift();\n        &#x2F;&#x2F; console.log(&#96;arr:$&#123;arr&#125;，tmp:$&#123;tmp&#125;，myTurnIndex：$&#123;myTurnIndex&#125;&#96;);\n        if (tmp &#x3D;&#x3D;&#x3D; heapq[0] &amp;&amp; tmp &#x3D;&#x3D;&#x3D; myTurn &amp;&amp; myTurnIndex &#x3D;&#x3D;&#x3D; 0) &#123;\n            return count;\n        &#125;\n        if (tmp &#x3D;&#x3D;&#x3D; heapq[0]) &#123;\n            &#x2F;&#x2F; console.log(&#39;-----&#39;);\n            count +&#x3D; 1;\n            heapq.shift();\n            myTurnIndex--;\n            continue;\n        &#125;\n        &#x2F;&#x2F; 这里开始就是不符合最小容忍度的了\n        &#x2F;&#x2F; 如果是自己\n        if (tmp &#x3D;&#x3D;&#x3D; myTurn &amp;&amp; myTurnIndex &#x3D;&#x3D;&#x3D; 0) &#123;\n            arr.push(tmp);\n            myTurnIndex &#x3D; heapq.length - 1;\n        &#125; else &#123;\n            &#x2F;&#x2F; 如果不是自己\n            arr.push(tmp);\n            myTurnIndex--;\n        &#125;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","feature":true,"text":"9月排名赛代码总结第一题：炮弹传感器2为了研究炮弹的射击轨迹，研究人员在炮弹上安装了一个高精度的高度传感器，每隔一小段时间记录一下当前的海拔高度。研究人员需要找到一个快速的算法，可以方便的找到曾经飞到过某一个高度的炮弹数据。 输入描述:第一行为正整数m，表示有m组测试用例，其中1...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":4,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":4,"path":"api/tags/数据结构.json"},{"name":"优先队列","slug":"优先队列","count":3,"path":"api/tags/优先队列.json"},{"name":"字节跳动","slug":"字节跳动","count":2,"path":"api/tags/字节跳动.json"},{"name":"双指针","slug":"双指针","count":1,"path":"api/tags/双指针.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#9%E6%9C%88%E6%8E%92%E5%90%8D%E8%B5%9B%E4%BB%A3%E7%A0%81%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">9月排名赛代码总结</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E9%A2%98%EF%BC%9A%E7%82%AE%E5%BC%B9%E4%BC%A0%E6%84%9F%E5%99%A82\"><span class=\"toc-text\">第一题：炮弹传感器2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">输入描述:</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">输出描述:</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">输入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">输出</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%B3%95\"><span class=\"toc-text\">解法</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E9%A2%98%EF%BC%9A%E5%8F%96%E9%A4%90%E6%AC%A1%E5%BA%8F%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">第二题：取餐次序计算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%8F%8F%E8%BF%B0-1\"><span class=\"toc-text\">输入描述:</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%8F%8F%E8%BF%B0-1\"><span class=\"toc-text\">输出描述:</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B1\"><span class=\"toc-text\">示例1</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA-1\"><span class=\"toc-text\">输出</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">说明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B2\"><span class=\"toc-text\">示例2</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA-2\"><span class=\"toc-text\">输出</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E6%98%8E-1\"><span class=\"toc-text\">说明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%B3%95%EF%BC%9A\"><span class=\"toc-text\">解法：</span></a></li></ol></li></ol>","author":{"name":"风离","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"略懂数据挖掘、NLP和推荐算法的前炼丹师，目前沉迷JS、React的前端硕狗。 <br /> @ <b>公众号：丹星X</b>","socials":{"github":"https://github.com/leek-emperor","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/ma-xing-yu-71","csdn":"https://blog.csdn.net/weixin_44008395?type=blog","juejin":"https://juejin.cn/user/1042800253352664","customs":{}}},"mapped":true,"prev_post":{"title":"数据结构（四）优先队列/大小根堆","uid":"ccd980cab5c75bdd94e2c8b8c13252bb","slug":"优先队列","date":"2022-09-12T10:00:00.000Z","updated":"2022-10-05T06:35:34.488Z","comments":true,"path":"api/articles/优先队列.json","keywords":null,"cover":"https://res.cloudinary.com/dg7crzfct/image/upload/v1664951049/%E6%96%87%E7%AB%A0%E7%B4%A0%E6%9D%90%E5%BA%93/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/steve-johnson-ArmJnhq6ybs-unsplash_opds7q.jpg","text":"大家好，这里是丹星，又来更新数据结构啦，今天也是老朋友啦，因为之前的几篇文章都提到了它：优先队列，又叫小&#x2F;大根堆。为什么这么快更新呢，因为昨天力扣周赛遇到这个被打爆啦，因为发现了之前总是用sort模拟小根堆也不是办法呀，还是得自己会写。 What is the 堆 ?其...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":4,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":4,"path":"api/tags/数据结构.json"},{"name":"优先队列","slug":"优先队列","count":3,"path":"api/tags/优先队列.json"}],"author":{"name":"风离","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"略懂数据挖掘、NLP和推荐算法的前炼丹师，目前沉迷JS、React的前端硕狗。 <br /> @ <b>公众号：丹星X</b>","socials":{"github":"https://github.com/leek-emperor","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/ma-xing-yu-71","csdn":"https://blog.csdn.net/weixin_44008395?type=blog","juejin":"https://juejin.cn/user/1042800253352664","customs":{}}},"feature":true},"next_post":{"title":"爬虫前置——页面和网络相关知识","uid":"66b66ee279145d8f8b0e567a448e4840","slug":"爬虫前置——网页和网络相关","date":"2022-10-10T07:00:00.000Z","updated":"2022-10-10T06:27:17.152Z","comments":true,"path":"api/articles/爬虫前置——网页和网络相关.json","keywords":null,"cover":[],"text":"HTML什么是HTML？ 超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。 前端三件套：HTML、CSS和Javascript。 HTML和CSS不算是编程语言。HTML更像是一个Word，可以写文字、插...","link":"","photos":[],"count_time":{"symbolsCount":290,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":2,"path":"api/categories/前端.json"}],"tags":[{"name":"HTML","slug":"HTML","count":1,"path":"api/tags/HTML.json"},{"name":"CSS","slug":"CSS","count":1,"path":"api/tags/CSS.json"},{"name":"HTTP","slug":"HTTP","count":1,"path":"api/tags/HTTP.json"},{"name":"XML","slug":"XML","count":1,"path":"api/tags/XML.json"}],"author":{"name":"风离","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"略懂数据挖掘、NLP和推荐算法的前炼丹师，目前沉迷JS、React的前端硕狗。 <br /> @ <b>公众号：丹星X</b>","socials":{"github":"https://github.com/leek-emperor","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/ma-xing-yu-71","csdn":"https://blog.csdn.net/weixin_44008395?type=blog","juejin":"https://juejin.cn/user/1042800253352664","customs":{}}}}}