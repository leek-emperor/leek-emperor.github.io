{"title":"Nodejs的fs和path模块","uid":"f4b6bd6d60fadd20c45e06e4a76e55fe","slug":"Node其他模块笔记","date":"2022-09-27T02:00:00.000Z","updated":"2022-11-06T14:04:41.078Z","comments":true,"path":"api/articles/Node其他模块笔记.json","keywords":null,"cover":"https://res.cloudinary.com/dg7crzfct/image/upload/v1665560332/%E6%96%87%E7%AB%A0%E7%B4%A0%E6%9D%90%E5%BA%93/eugene-golovesov-KxSPGDytjNo-unsplash_fess9k.jpg","content":"<h1 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a>Nodejs</h1><h2 id=\"Node-js-的特点\"><a href=\"#Node-js-的特点\" class=\"headerlink\" title=\"Node.js 的特点\"></a>Node.js 的特点</h2><ul>\n<li>异步、非阻塞 IO 模型</li>\n<li>事件循环</li>\n<li>单线程</li>\n<li>总结：轻量和高效</li>\n</ul>\n<p>Node.js 的性能和效率非常高。</p>\n<p>你可能会疑问：一个线程如何服务于大量的请求、如何处理高并发的呢？这是因为，Node.js 采用的是异步的、非阻塞的模型。</p>\n<p>这里所谓的“单线程”，指的是 <strong>Node 的主线程只有一个</strong>。</p>\n<p>为了确保主线程不被阻塞，主线程是用于接收客户端请求。但不会处理具体的任务。</p>\n<p>而 Node 的背后还有一个线程池，线程池会处理长时间运行的任务（比如 IO 操作、网络操作）。线程池里的任务是通过<strong>队列和事件循环</strong>的机制来执行。</p>\n<h2 id=\"使用-Node-js-时的劣势\"><a href=\"#使用-Node-js-时的劣势\" class=\"headerlink\" title=\"使用 Node.js 时的劣势\"></a>使用 Node.js 时的劣势</h2><ul>\n<li>程序运行不稳定，可能会出现服务不可用的情况</li>\n<li>程序运行效率较低，每秒的请求数维持在一个较低的水平</li>\n<li>前端同学对服务器端的技术不太熟悉。</li>\n</ul>\n<h2 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h2><h3 id=\"模块化规范\"><a href=\"#模块化规范\" class=\"headerlink\" title=\"模块化规范\"></a>模块化规范</h3><p>服务器端规范：</p>\n<ul>\n<li><a href=\"http://www.commonjs.org/\">CommonJS规范</a>：是 Node.js 使用的模块化规范。</li>\n</ul>\n<p>CommonJS 就是一套约定标准，不是技术。用于约定我们的代码应该是怎样的一种结构。</p>\n<p>浏览器端规范：</p>\n<ul>\n<li><a href=\"https://github.com/amdjs/amdjs-api\">AMD规范</a>：是 <strong><a href=\"http://requirejs.org/\">RequireJS</a></strong> 在推广过程中对模块化定义的规范化产出。</li>\n</ul>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">- 异步加载模块；\n\n- 依赖前置、提前执行：require([`foo`,`bar`],function(foo,bar)&#123;&#125;);   //也就是说把所有的包都 require 成功，再继续执行代码。\n\n- define 定义模块：define([`require`,`foo`],function()&#123;return&#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li><a href=\"https://web.qianguyihao.com/11-Node.js/04-Node.js%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83%EF%BC%9ACommonJS.html\">CMD规范</a>**：是 **<a href=\"http://seajs.org/\">SeaJS</a> 在推广过程中对模块化定义的规范化产出。淘宝团队开发。</li>\n</ul>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">同步加载模块；\n\n依赖就近，延迟执行：require(./a) 直接引入。或者Require.async 异步引入。   //依赖就近：执行到这一部分的时候，再去加载对应的文件。\n\ndefine 定义模块， export 导出：define(function(require, export, module)&#123;&#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>最明显的区别就是在模块定义时对依赖的处理不同</p>\n<p><strong>1、AMD推崇依赖前置，在定义模块的时候就要声明其依赖的模块</strong><br><strong>2、CMD推崇就近依赖，只有在用到某个模块的时候再去require</strong></p>\n<p>有一种说法：AMD用户体验好，因为没有延迟，依赖模块提前执行了，CMD性能好，因为只有用户需要的时候才执行的</p>\n<p>PS：面试时，经常会问AMD 和 CMD 的区别。</p>\n<p>另外，还有ES6规范：import &amp; export。</p>\n<h4 id=\"暴露模块的方式一：-exports\"><a href=\"#暴露模块的方式一：-exports\" class=\"headerlink\" title=\"暴露模块的方式一： exports\"></a>暴露模块的方式一： exports</h4><p><code>exports</code>对象用来导出当前模块的公共方法或属性。别的模块通过 require 函数调用当前模块时，得到的就是当前模块的 exports 对象。</p>\n<p><strong>语法格式</strong>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 相当于是：给 exports 对象添加属性</span>\nexports<span class=\"token punctuation\">.</span>xxx <span class=\"token operator\">=</span> value<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这个 value 可以是任意的数据类型。</p>\n<p><strong>注意</strong>：暴露的关键词是<code>exports</code>，不是<code>export</code>。其实，这里的 exports 类似于 ES6 中的 export 的用法，都是用来导出一个指定名字的对象。</p>\n<p><strong>代码举例</strong>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'qianguyihao'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"暴露模块的方式二：-module-exports\"><a href=\"#暴露模块的方式二：-module-exports\" class=\"headerlink\" title=\"暴露模块的方式二： module.exports\"></a>暴露模块的方式二： module.exports</h4><p><code>module.exports</code>用来导出一个默认对象，没有指定对象名。</p>\n<p>语法格式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 方式一：导出整个 exports 对象</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 方式二：给 exports 对象添加属性</span>\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>xxx <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"exports-和-module-exports-的区别\"><a href=\"#exports-和-module-exports-的区别\" class=\"headerlink\" title=\"exports 和 module.exports 的区别\"></a>exports 和 module.exports 的区别</h4><p>最重要的区别：</p>\n<ul>\n<li>使用exports时，只能单个设置属性 <code>exports.a = a;</code></li>\n<li>使用module.exports时，既单个设置属性 <code>module.exports.a</code>，也可以整个赋值 <code>module.exports = obj</code>。</li>\n</ul>\n<p>其他要点：</p>\n<ul>\n<li>Node中每个模块的最后，都会执行 <code>return: module.exports</code>。</li>\n<li>Node中每个模块都会把 <code>module.exports</code>指向的对象赋值给一个变量 <code>exports</code>，也就是说 <code>exports = module.exports</code>。</li>\n<li><code>module.exports = XXX</code>，表示当前模块导出一个单一成员，结果就是XXX。</li>\n<li>如果需要导出多个成员，则必须使用 <code>exports.add = XXX; exports.foo = XXX</code>。或者使用 <code>module.exports.add = XXX; module.export.foo = XXX</code>。</li>\n</ul>\n<h4 id=\"问题-暴露的模块到底是谁？\"><a href=\"#问题-暴露的模块到底是谁？\" class=\"headerlink\" title=\"问题: 暴露的模块到底是谁？\"></a>问题: 暴露的模块到底是谁？</h4><p><strong>答案</strong>：暴露的本质是<code>exports</code>对象。【重要】</p>\n<p>比如，方式一的 <code>exports.a = a</code> 可以理解成是，<strong>给 exports 对象添加属性</strong>。方式二的 <code>module.exports = a</code>可以理解成是给整个 exports 对象赋值。方式二的 <code>module.exports.c = c</code>可以理解成是给 exports 对象添加属性。</p>\n<p>Node.js 中每个模块都有一个 module 对象，module 对象中的有一个 exports 属性称之为<strong>接口对象</strong>。我们需要把模块之间公共的方法或属性挂载在这个接口对象中，方便其他的模块使用。</p>\n<h4 id=\"模块的初始化\"><a href=\"#模块的初始化\" class=\"headerlink\" title=\"模块的初始化\"></a>模块的初始化</h4><p>一个模块中的 JS 代码仅在模块<strong>第一次被使用时</strong>执行一次，并且在使用的过程中进行初始化，然后会被缓存起来，便于后续继续使用。</p>\n<p>代码举例：</p>\n<p>（1）calModule.js:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nexports<span class=\"token punctuation\">.</span>add <span class=\"token operator\">=</span> add<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>（2）main.js：（在 main.js 中引入 hello.js 模块）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> addModule1 <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./calModule'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> addModule2 <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./calModule'</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>addModule1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>addModule2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在命令行执行 <code>node main.js</code> 运行程序，打印结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">2</span>\n<span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>从打印结果中可以看出，<code>calModule.js</code>这个模块虽然被引用了两次，但只初始化了一次。</p>\n<h2 id=\"fs模块\"><a href=\"#fs模块\" class=\"headerlink\" title=\"fs模块\"></a>fs模块</h2><h3 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h3><p>今天这篇文章，重点讲一下 Node 内置模块中的 <strong>fs（文件处理模块）</strong>。</p>\n<p>在使用文件模块之前，记得先导入：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 导入文件模块</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>fs 的英文全称是 File System。fs 模块提供了很多 api 方法，我们首先应该学习的方法是<strong>文件读取</strong>。</p>\n<p>Node中文件读取的方式主要有以下几种。</p>\n<h4 id=\"异步读取文件-fs-readFile\"><a href=\"#异步读取文件-fs-readFile\" class=\"headerlink\" title=\"异步读取文件 fs.readFile()\"></a>异步读取文件 fs.readFile()</h4><p>语法格式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>代码举例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 失败</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 成功</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'异步读取数据：'</span> <span class=\"token operator\">+</span> data2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果需要嵌套读取多个文件，可以用 promise 或者 async … await 进行封装。代码举例如下。</p>\n<h4 id=\"promise-封装-fs-readFile\"><a href=\"#promise-封装-fs-readFile\" class=\"headerlink\" title=\"promise 封装 fs.readFile()\"></a>promise 封装 fs.readFile()</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fsRead</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">flag</span><span class=\"token operator\">:</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">encoding</span><span class=\"token operator\">:</span> <span class=\"token string\">\"utf-8\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//失败执行的内容</span>\n                <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//成功执行的内容</span>\n                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> promise1 <span class=\"token operator\">=</span> <span class=\"token function\">fsRead</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello1.txt'</span><span class=\"token punctuation\">)</span>\npromise1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res1</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fsRead</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello2.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res2</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fsRead</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello3.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res3</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"async-…-await-封装-fs-readFile\"><a href=\"#async-…-await-封装-fs-readFile\" class=\"headerlink\" title=\"async … await 封装 fs.readFile()\"></a>async … await 封装 fs.readFile()</h4><p>这个写法更为简洁，推荐。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fsRead</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">flag</span><span class=\"token operator\">:</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">encoding</span><span class=\"token operator\">:</span> <span class=\"token string\">\"utf-8\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//失败执行的内容</span>\n                <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//成功执行的内容</span>\n                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ReadList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> res1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fsRead</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello1.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> res2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fsRead</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello2.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> res3 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fsRead</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello3.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 执行方法</span>\n<span class=\"token function\">ReadList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"同步读取文件-fs-readFileSync\"><a href=\"#同步读取文件-fs-readFileSync\" class=\"headerlink\" title=\"同步读取文件 fs.readFileSync()\"></a>同步读取文件 fs.readFileSync()</h4><p>语法格式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>代码举例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 文件不存在，或者权限错误</span>\n  <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Node-js-中的同步和异步的区别\"><a href=\"#Node-js-中的同步和异步的区别\" class=\"headerlink\" title=\"Node.js 中的同步和异步的区别\"></a>Node.js 中的同步和异步的区别</h4><p>fs模块对文件的几乎所有操作都有同步和异步两种形式。例如：readFile() 和 readFileSync()。</p>\n<p>区别：</p>\n<ul>\n<li>同步调用会阻塞代码的执行，异步则不会。</li>\n<li>异步调用会将 读取任务 下达到任务队列，直到任务执行完成才会回调。</li>\n<li>异常处理方面：同步必须使用 try catch 方式，异步可以通过回调函数的第一个参数。【重要】</li>\n</ul>\n<h3 id=\"写入文件\"><a href=\"#写入文件\" class=\"headerlink\" title=\"写入文件\"></a>写入文件</h3><p>语法格式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> encoding<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>async … await 封装：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">writeFs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> content</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">flag</span><span class=\"token operator\">:</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">encoding</span><span class=\"token operator\">:</span> <span class=\"token string\">\"utf-8\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//console.log(\"写入内容出错\")</span>\n                <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">//console.log(\"写入内容成功\")</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">writeList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">writeFs</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1.html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;h1>qianguyihao&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">writeFs</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2.html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;h1>hello world&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">writeFs</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3.html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;h1>永不止步&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">writeList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><p>语法格式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>1</p>\n<p>参数说明：</p>\n<ul>\n<li>path：文件路径。</li>\n<li>callback：回调函数。</li>\n</ul>\n<p>代码举例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path/file.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件删除成功'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>备注：<code>fs.unlink()</code> 不能用于删除目录。 如果要删除目录，可以使用 <code>fs.rmdir()</code>。</p>\n<h3 id=\"读取目录\"><a href=\"#读取目录\" class=\"headerlink\" title=\"读取目录\"></a>读取目录</h3><p>语法格式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>参数说明：</p>\n<ul>\n<li>path：文件路径。</li>\n<li>options参数可以是：<ul>\n<li>recursive：是否以递归的方式创建目录，默认为 false。</li>\n<li>mode：设置目录权限，默认为 0777。</li>\n</ul>\n</li>\n</ul>\n<p>代码举例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查看 /tmp 目录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tmp/\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> files</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   files<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> file <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"Path模块\"><a href=\"#Path模块\" class=\"headerlink\" title=\"Path模块\"></a>Path模块</h2><h3 id=\"path-路径模块\"><a href=\"#path-路径模块\" class=\"headerlink\" title=\"path 路径模块\"></a>path 路径模块</h3><p>Node.js 通过<code>path</code>这个内置模块，提供了一些路径操作的API，具体可以参考官方的api文档。这里列举一些常用的API。</p>\n<h4 id=\"path-extname-获取文件-x2F-路径的扩展名\"><a href=\"#path-extname-获取文件-x2F-路径的扩展名\" class=\"headerlink\" title=\"path.extname() 获取文件&#x2F;路径的扩展名\"></a>path.extname() 获取文件&#x2F;路径的扩展名</h4><p>语法格式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">path<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span>myPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>代码解释：</p>\n<ul>\n<li>获取 <code>myPath</code> 这个文件或者路径的扩展名。</li>\n<li><code>myPath</code> 这个参数要求是字符串。如果 <code>myPath</code> 不是字符串，则抛出 TypeError。</li>\n</ul>\n<p>代码举例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npath<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 '.txt'</span>\n\npath<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span><span class=\"token string\">'www.qianguyihao.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 '.com'</span>\n\npath<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index.coffee.md'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回 '.md'</span>\n\npath<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回 '.'</span>\n\npath<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回 ''</span>\n\npath<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回 ''</span>\n\npath<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.index.md'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回 '.md'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"path-resolve-生成完成的绝对路径\"><a href=\"#path-resolve-生成完成的绝对路径\" class=\"headerlink\" title=\"path.resolve() 生成完成的绝对路径\"></a>path.resolve() 生成完成的绝对路径</h4><p>语法格式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>myPaths<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>解释：</p>\n<ul>\n<li>将路径或路径片段的序列解析为绝对路径。</li>\n<li>返回的路径是<strong>从右往左</strong>处理，后面的每个 myPath 被依次解析，直到构造出一个完整的绝对路径。</li>\n</ul>\n<p>代码举例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'/foo1/foo2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'qianguyihao'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result1 <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印结果：/foo1/foo2/qianguyihao/foo3</span>\n\n<span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'/foo1/foo2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/qianguyihao'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result2 <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印结果：/qianguyihao/foo3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"几个常见路径\"><a href=\"#几个常见路径\" class=\"headerlink\" title=\"几个常见路径\"></a>几个常见路径</h4><ul>\n<li><code>__dirname</code>：这是一个常量，表示：当前执行文件所在<strong>完整目录</strong>。</li>\n<li><code>__filename</code>：这是一个常量。表示：当前执行文件的<strong>完整目录 + 文件名</strong>。</li>\n<li><code>process.cwd</code>：获取当前执行 Node命令 时的目录名。</li>\n</ul>\n<h4 id=\"path-join-将多个路径进行拼接\"><a href=\"#path-join-将多个路径进行拼接\" class=\"headerlink\" title=\"path.join() 将多个路径进行拼接\"></a>path.join() 将多个路径进行拼接</h4><p>如果是我们手动拼接路径，容易出错。这个时候，可以利用 path.join() 方法将路径进行拼接。</p>\n<p>语法格式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>paths<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> result1 <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./app.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回：/Users/smyhvae/qianguyihao/app.js</span>\n\n<span class=\"token keyword\">const</span> result2 <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'./foo3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回：/foo1/foo2/foo3</span>\n\n<span class=\"token keyword\">const</span> result3 <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/foo3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回：/foo1/foo2/foo3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n","text":"NodejsNode.js 的特点 异步、非阻塞 IO 模型 事件循环 单线程 总结：轻量和高效 Node.js 的性能和效率非常高。 你可能会疑问：一个线程如何服务于大量的请求、如何处理高并发的呢？这是因为，Node.js 采用的是异步的、非阻塞的模型。 这里所谓的“单线程”，...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"前端","slug":"前端","count":5,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":3,"path":"api/tags/前端.json"},{"name":"Nodejs","slug":"Nodejs","count":1,"path":"api/tags/Nodejs.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Nodejs\"><span class=\"toc-text\">Nodejs</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Node-js-%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">Node.js 的特点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-Node-js-%E6%97%B6%E7%9A%84%E5%8A%A3%E5%8A%BF\"><span class=\"toc-text\">使用 Node.js 时的劣势</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E5%8C%96\"><span class=\"toc-text\">模块化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">模块化规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9A%B4%E9%9C%B2%E6%A8%A1%E5%9D%97%E7%9A%84%E6%96%B9%E5%BC%8F%E4%B8%80%EF%BC%9A-exports\"><span class=\"toc-text\">暴露模块的方式一： exports</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9A%B4%E9%9C%B2%E6%A8%A1%E5%9D%97%E7%9A%84%E6%96%B9%E5%BC%8F%E4%BA%8C%EF%BC%9A-module-exports\"><span class=\"toc-text\">暴露模块的方式二： module.exports</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#exports-%E5%92%8C-module-exports-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">exports 和 module.exports 的区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98-%E6%9A%B4%E9%9C%B2%E7%9A%84%E6%A8%A1%E5%9D%97%E5%88%B0%E5%BA%95%E6%98%AF%E8%B0%81%EF%BC%9F\"><span class=\"toc-text\">问题: 暴露的模块到底是谁？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">模块的初始化</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#fs%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">fs模块</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">读取文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6-fs-readFile\"><span class=\"toc-text\">异步读取文件 fs.readFile()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#promise-%E5%B0%81%E8%A3%85-fs-readFile\"><span class=\"toc-text\">promise 封装 fs.readFile()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#async-%E2%80%A6-await-%E5%B0%81%E8%A3%85-fs-readFile\"><span class=\"toc-text\">async … await 封装 fs.readFile()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6-fs-readFileSync\"><span class=\"toc-text\">同步读取文件 fs.readFileSync()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Node-js-%E4%B8%AD%E7%9A%84%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">Node.js 中的同步和异步的区别</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">写入文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">删除文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E5%8F%96%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">读取目录</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Path%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">Path模块</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#path-%E8%B7%AF%E5%BE%84%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">path 路径模块</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#path-extname-%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6-x2F-%E8%B7%AF%E5%BE%84%E7%9A%84%E6%89%A9%E5%B1%95%E5%90%8D\"><span class=\"toc-text\">path.extname() 获取文件&#x2F;路径的扩展名</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#path-resolve-%E7%94%9F%E6%88%90%E5%AE%8C%E6%88%90%E7%9A%84%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">path.resolve() 生成完成的绝对路径</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">几个常见路径</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#path-join-%E5%B0%86%E5%A4%9A%E4%B8%AA%E8%B7%AF%E5%BE%84%E8%BF%9B%E8%A1%8C%E6%8B%BC%E6%8E%A5\"><span class=\"toc-text\">path.join() 将多个路径进行拼接</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"风离","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"略懂数据挖掘、NLP和推荐算法的前炼丹师，目前沉迷JS、React的前端硕狗。 <br /> @ <b>公众号：丹星X</b>","socials":{"github":"https://github.com/leek-emperor","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/ma-xing-yu-71","csdn":"https://blog.csdn.net/weixin_44008395?type=blog","juejin":"https://juejin.cn/user/1042800253352664","customs":{}}},"mapped":true,"prev_post":{"title":"爬虫前置——页面和网络相关知识","uid":"66b66ee279145d8f8b0e567a448e4840","slug":"爬虫前置——网页和网络相关","date":"2022-10-10T07:00:00.000Z","updated":"2022-10-10T14:12:40.120Z","comments":true,"path":"api/articles/爬虫前置——网页和网络相关.json","keywords":null,"cover":"https://res.cloudinary.com/dg7crzfct/image/upload/v1665384096/%E6%96%87%E7%AB%A0%E7%B4%A0%E6%9D%90%E5%BA%93/R%E8%AF%AD%E8%A8%80%E8%AF%BE%E7%9A%84HTML%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/jackson-sophat-_t-l5FFH8VA-unsplash_f8htiv.jpg","text":"HTML什么是HTML？ 超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。 前端三件套：HTML、CSS和Javascript。 HTML和CSS不算是编程语言。HTML更像是一个Word，可以写文字、插...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"前端","slug":"前端","count":5,"path":"api/categories/前端.json"}],"tags":[{"name":"HTML","slug":"HTML","count":1,"path":"api/tags/HTML.json"},{"name":"CSS","slug":"CSS","count":1,"path":"api/tags/CSS.json"},{"name":"HTTP","slug":"HTTP","count":1,"path":"api/tags/HTTP.json"},{"name":"XML","slug":"XML","count":1,"path":"api/tags/XML.json"}],"author":{"name":"风离","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"略懂数据挖掘、NLP和推荐算法的前炼丹师，目前沉迷JS、React的前端硕狗。 <br /> @ <b>公众号：丹星X</b>","socials":{"github":"https://github.com/leek-emperor","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/ma-xing-yu-71","csdn":"https://blog.csdn.net/weixin_44008395?type=blog","juejin":"https://juejin.cn/user/1042800253352664","customs":{}}}},"next_post":{"title":"字节跳动2022年9月模拟笔试（上）","uid":"8ff685f8218119a3e3b228fe1d1d8ae5","slug":"字节跳动九月模拟笔试（下）","date":"2022-09-08T13:57:00.000Z","updated":"2022-10-05T14:18:20.634Z","comments":true,"path":"api/articles/字节跳动九月模拟笔试（下）.json","keywords":null,"cover":"https://res.cloudinary.com/dg7crzfct/image/upload/v1664951146/%E6%96%87%E7%AB%A0%E7%B4%A0%E6%9D%90%E5%BA%93/shahadat-rahman-gnyA8vd3Otc-unsplash_sufut6.jpg","text":"第三题：数组游戏 双休在家的凯凯真的是太无聊了，他准备和他家的猫玩一个游戏。 凯凯在小黑板上写下一串有正有负的数列，猫咪从左到右，每碰到一个数，可以选择选取或者不选取。 在选取过程中，要保证所有选取的数的和始终为非负。在这个限制条件下求最多可以选取多少个数。 小猫咪表示“我太难了...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":4,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":4,"path":"api/tags/数据结构.json"},{"name":"二叉树","slug":"二叉树","count":2,"path":"api/tags/二叉树.json"},{"name":"优先队列","slug":"优先队列","count":3,"path":"api/tags/优先队列.json"},{"name":"字节跳动","slug":"字节跳动","count":2,"path":"api/tags/字节跳动.json"}],"author":{"name":"风离","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"略懂数据挖掘、NLP和推荐算法的前炼丹师，目前沉迷JS、React的前端硕狗。 <br /> @ <b>公众号：丹星X</b>","socials":{"github":"https://github.com/leek-emperor","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/ma-xing-yu-71","csdn":"https://blog.csdn.net/weixin_44008395?type=blog","juejin":"https://juejin.cn/user/1042800253352664","customs":{}}}}}